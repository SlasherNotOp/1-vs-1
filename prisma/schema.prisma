// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String   @id @default(uuid())
  username   String   @unique
  email      String   @unique
  password   String
  eloRating  Int      @default(1000)
  createdAt  DateTime @default(now())
  matches1   Match[]  @relation("player1")
  matches2   Match[]  @relation("player2")
  wonMatches Match[]  @relation("winner")
}

model Problem {
  id            Int        @id @default(autoincrement())
  title         String
  description   String
  difficulty    String
  exampleInput  String
  exampleOutput String
  testCases     TestCase[]
  matches       Match[]
}

model TestCase {
  id        Int     @id @default(autoincrement())
  input     String
  output    String
  problem   Problem @relation(fields: [problemId], references: [id])
  problemId Int
}

model Match {
  id              String    @id @default(uuid())
  player1         User      @relation("player1", fields: [player1Id], references: [id])
  player1Id       String
  player2         User      @relation("player2", fields: [player2Id], references: [id])
  player2Id       String
  winner          User?     @relation("winner", fields: [winnerId], references: [id])
  winnerId        String?
  problem         Problem   @relation(fields: [problemId], references: [id])
  problemId       Int
  startTime       DateTime
  endTime         DateTime?
  player1Solution String?
  player2Solution String?
  player1Language String?
  player2Language String?
  createdAt       DateTime  @default(now())
}
